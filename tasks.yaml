parameters:
  - name: working_dir
    type: string
    default: tools_git_sync
  - name: source_repo
    type: string
  - name: source_branch
    type: string
    default: master
  - name: source_dir
    type: string
    default: source
  - name: target_repo
    type: string
  - name: target_branch
    type: string
    default: master
  - name: target_dir
    type: string
    default: target
  - name: sync_dir
    type: object
    default:
      .:
        destination: .
        exclude: .git
  - name: gitlab_host
    type: string
  - name: gitlab_access_token
    type: string
  - name: gitlab_project_id
    type: integer
  - name: gitlab_assignee
    type: string
    default: ""
  - name: gitlab_mention_users
    type: string
    default: ""

tasks:
  sync:
    tasks:
      initialize:
        script: |
          echo "Creating working directory..."

          rm -fR {{ .working_dir }}
          mkdir -p {{ .working_dir }}

      copy:
        script: |
          CURRENT_DIR=${PWD}
          SOURCES=$(echo "{{ .sync_dir | toYaml }}" | yq -r keys[])

          for SOURCE in ${SOURCES}; do
            FDIGNORE=".git,.gitignore"
            DESTINATION=$(echo "{{ .sync_dir | toYaml }}" | yq -r .[\"${SOURCE}\"].destination)
            EXCLUDE=$(echo "{{ .sync_dir | toYaml }}" | yq -r ".[\"${SOURCE}\"].exclude // empty | join(\",\")")

            echo "Copying {{ .working_dir }}/{{ .source_dir }}/${SOURCE} into {{ .working_dir }}/{{ .target_dir }}/${DESTINATION}..."

            if [ ! -z "${EXCLUDE}" ]; then
              FDIGNORE="${FDIGNORE},${EXCLUDE}"
            fi

            echo ${FDIGNORE} | tr ',' "\n" | cat > {{ .working_dir }}/.fdignore

            fd . -tf -H {{ .working_dir }}/{{ .target_dir }}/${DESTINATION} -X rm
            find {{ .working_dir }}/{{ .target_dir }}/${DESTINATION} -type d -empty -delete
            cd {{ .working_dir }}/{{ .source_dir }}/${SOURCE} && fd . -tf -H . -X rsync -R '{}' ${CURRENT_DIR}/{{ .working_dir }}/{{ .target_dir }}/${DESTINATION}
          done

      finalize:
        script: |
          echo "Removing working directory..."
          rm -fR {{ .working_dir }}

    steps:
      - if:
          - task: gitlab.check_mr
        then:
          - task: sync.initialize
          - task: git.clone
            arguments:
              destination: "{{ .source_dir }}"
              repo: "{{ .source_repo }}"
              branch: "{{ .source_branch }}"
          - task: git.clone
            arguments:
              destination: "{{ .target_dir }}"
              repo: "{{ .target_repo }}"
              branch: "{{ .target_branch }}"
              clone_options: --single-branch
          - task: sync.copy
          - if:
              - task: git.check_diff
            then:
              - task: git.commit_and_push
              - task: gitlab.create_mr
          - task: sync.finalize

  git:
    tasks:
      clone:
        parameters:
          - name: destination
            type: string
          - name: repo
            type: string
          - name: branch
            type: string
          - name: clone_options
            type: string
            default: --single-branch --depth 1

        script: |
          echo "Cloning {{ .repo }} into {{ .working_dir }}/{{ .destination }}..."

          git clone -b {{ .branch }} {{ .clone_options }} {{ .repo }} {{ .working_dir }}/{{ .destination }} &> /dev/null

      check_diff:
        script: |
          echo "Checking for DIFF..."

          DIFF=$(git -C {{ .working_dir }}/{{ .target_dir }} diff HEAD)

          if [ ! -z "${DIFF}" ]; then
            exit 0
          fi

          echo "There is no DIFF to be synced."

          exit 1

      commit_and_push:
        script: |
          echo "Commiting and pushing DIFF..."

          BRANCH_NAME=sync--$(date +%d-%m-%Y--%H-%M)

          git -C {{ .working_dir }}/{{ .target_dir }} checkout -b ${BRANCH_NAME}
          git -C {{ .working_dir }}/{{ .target_dir }} add -A
          git -C {{ .working_dir }}/{{ .target_dir }} commit -m "Sync repositories"
          git -C {{ .working_dir }}/{{ .target_dir }} push origin ${BRANCH_NAME}

  gitlab:
    tasks:
      check_mr:
        script: |
          echo "Checking for existing MR..."

          RESPONSE=$(curl --silent "{{ .gitlab_host }}/api/v4/projects/{{ .gitlab_project_id }}/merge_requests?state=opened&labels=Sync" \
            --header "PRIVATE-TOKEN:{{ .gitlab_access_token }}");

          WEB_URL=$(echo ${RESPONSE} | jq '.[0].web_url')

          if [ "${WEB_URL}" == "null" ]; then
            exit 0
          fi

          echo "There is another one not merged MR. Please visit ${WEB_URL}"

          exit 1

      create_mr:
        script: |
          echo "Creating MR..."

          SOURCE_BRANCH=$(git -C {{ .working_dir }}/{{ .target_dir }} rev-parse --abbrev-ref HEAD)

          ASSIGNEE_ID=0
          if [ ! -z "{{ .gitlab_assignee }}" ]; then
            RESPONSE=$(curl --silent "{{ .gitlab_host }}/api/v4/users?search={{ .gitlab_assignee }}&active=true&per_page=1" \
              --header "PRIVATE-TOKEN:{{ .gitlab_access_token }}")

            ID=$(echo ${RESPONSE} | jq '.[0].id')

            if [ ! "${ID}" == "null" ]; then
              ASSIGNEE_ID=${ID}
            fi
          fi

          BODY="{
            \"id\": {{ .gitlab_project_id }},
            \"source_branch\": \"${SOURCE_BRANCH}\",
            \"target_branch\": \"{{ .target_branch }}\",
            \"title\": \"WIP: ${SOURCE_BRANCH}\",
            \"assignee_id\": ${ASSIGNEE_ID},
            \"remove_source_branch\": true,
            \"labels\": \"Sync\"
          }";

          RESPONSE=$(curl --silent -X POST "{{ .gitlab_host }}/api/v4/projects/{{ .gitlab_project_id }}/merge_requests" \
            --header "PRIVATE-TOKEN:{{ .gitlab_access_token }}" \
            --header "Content-Type: application/json" \
            --data "${BODY}")

          MR_ID=$(echo ${RESPONSE} | jq '.iid')

          if [ ! "${MR_ID}" == "null" ] && [ ! -z "{{ .gitlab_mention_users }}" ]; then
            echo "Notifying users about created MR..."

            BODY="{
              \"body\": \"{{ .gitlab_mention_users }}\"
            }";

            curl --silent -X POST "{{ .gitlab_host }}/api/v4/projects/{{ .gitlab_project_id }}/merge_requests/${MR_ID}/notes" \
              --header "PRIVATE-TOKEN:{{ .gitlab_access_token }}" \
              --header "Content-Type: application/json" \
              --data "${BODY}" &> /dev/null
          fi
